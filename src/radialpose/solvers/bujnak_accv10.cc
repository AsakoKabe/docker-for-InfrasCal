#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <complex>
#include "bujnak_accv10.h"
#include "../misc/univariate.h"

static const double SMALL_NUMBER = 1e-8;
static const int coeffs0_ind[] = { 0,10,0,1,10,11,30,1,2,11,12,31,2,12,32,0,10,30,0,1,3,10,11,13,30,31,1,2,3,4,11,12,13,14,31,32,33,2,4,12,14,32,34,0,3,10,13,30,33,50,1,3,4,5,11,13,14,15,31,33,34,51,2,4,5,12,14,15,32,34,35,52,3,5,13,15,33,35,53,4,5,14,15,34,35,54,5,15,35,55,0,10,0,1,10,11,30,0,10,30,1,2,11,12,31,0,1,10,11,30,31,2,12,32,1,2,11,12,31,32,2,12,32,0,10,30,50,0,1,3,10,11,13,30,31,50,51,6,16,0,10,30,17,1,2,3,4,11,12,13,14,31,32,33,51,52,6,7,16,18,36,0,1,3,10,11,13,30,31,33,17,19,37,2,4,12,14,32,34,52,7,18,38,1,2,3,4,11,12,13,14,31,32,33,34,19,20,39,2,4,12,14,32,34,20,40,0,3,10,13,30,33,50,53,6,16,36,0,10,30,17,37,1,3,4,5,11,13,14,15,31,33,34,51,53,54,6,7,8,16,18,21,36,38,0,1,3,10,11,13,30,31,33,17,19,22,37,39,2,4,5,12,14,15,32,34,35,52,54,7,8,18,21,38,41,1,2,3,4,5,11,12,13,14,15,31,32,33,34,35,19,20,22,23,39,40,42,2,4,5,12,14,15,32,34,35,20,23,40,43,3,5,13,15,33,35,53,55,6,8,16,21,36,41,56,0,3,10,13,30,33,50,17,22,37,42,4,5,14,15,34,35,54,55,7,8,18,21,38,41,57,1,3,4,5,11,13,14,15,31,33,34,35,51,19,22,23,24,39,42,43,2,4,5,12,14,15,32,34,35,52,20,23,24,40,43,44,5,15,35,55,8,21,41,58,3,5,13,15,33,35,53,22,24,42,44,4,5,14,15,34,35,54,23,24,43,44,5,15,35,55,24,44,0,10,30,50,0,1,10,11,30,31,50,51,6,16,0,10,30,17,1,2,11,12,31,32,51,52,6,7,16,18,36,0,1,10,11,30,31,6,16,17,19,36,37,0,50,17,37,2,12,32,52,7,18,38,1,2,11,12,31,32,6,7,16,18,19,20,36,38,39,0,1,50,51,17,19,37,39,2,12,32,7,18,20,38,40,1,2,51,52,19,20,39,40,2,52,20,40,0,3,10,13,30,33,50,53,6,16,36,56,0,10,30,50,17,37,1,3,4,11,13,14,31,33,34,51,53,54,6,7,8,16,18,21,36,38,56,57,9,25,0,1,3,10,11,13,30,31,33,50,51,6,16,17,19,22,36,37,39,26,0,50,17,37,2,4,12,14,32,34,52,54,7,8,18,21,38,41,57,9,25,45,1,2,3,4,11,12,13,14,31,32,33,34,51,52,6,7,8,16,18,19,20,21,22,23,36,38,39,40,41,42,26,27,46,0,1,3,50,51,53,17,19,22,37,39,42,2,4,12,14,32,34,52,7,8,18,20,21,23,38,40,41,43,27,47,1,2,3,4,51,52,53,54,19,20,22,23,39,40,42,43,2,4,52,54,20,23,40,43,3,5,13,15,33,35,53,55,6,8,16,21,36,41,56,58,9,25,45,0,3,10,13,30,33,50,53,6,16,17,22,36,37,42,26,46,0,50,17,37,4,5,14,15,34,35,54,55,7,8,18,21,38,41,57,58,9,25,45,1,3,4,5,11,13,14,15,31,33,34,35,51,53,54,6,7,8,16,18,19,21,22,23,24,36,38,39,41,42,43,26,27,28,46,47,0,1,3,50,51,53,17,19,22,37,39,42,2,4,5,12,14,15,32,34,35,52,54,7,8,18,20,21,23,24,38,40,41,43,44,27,28,47,48,1,2,3,4,5,51,52,53,54,55,19,20,22,23,24,39,40,42,43,44,2,4,5,52,54,55,20,23,24,40,43,44,5,15,35,55,8,21,41,58,9,25,45,59,3,5,13,15,33,35,53,55,6,8,16,21,22,24,36,41,42,44,56,26,28,46,48,0,3,50,53,17,22,37,42,4,5,14,15,34,35,54,55,7,8,18,21,23,24,38,41,43,44,57,27,28,47,48,1,3,4,5,51,53,54,55,19,22,23,24,39,42,43,44,2,4,5,52,54,55,20,23,24,40,43,44,5,15,35,55,8,21,24,41,44,58,28,48,3,5,53,55,22,24,42,44,4,5,54,55,23,24,43,44,5,55,24,44,0,10,30,50,6,16,36,56,0,10,30,50,17,37,1,11,31,51,6,7,16,18,36,38,56,57,9,25,0,1,10,11,30,31,50,51,6,16,17,19,36,37,39,26,0,50,17,37,2,12,32,52,7,18,38,57,9,25,45,1,2,11,12,31,32,51,52,6,7,16,18,19,20,36,38,39,40,9,25,26,27,45,46,0,1,50,51,6,17,19,37,39,56,26,46,2,12,32,52,7,18,20,38,40,9,25,27,45,47,1,2,51,52,6,7,19,20,39,40,56,57,26,27,46,47,2,52,7,20,40,57,27,47,3,13,33,53,6,8,16,21,36,41,56,58,9,25,45,59,0,3,10,13,30,33,50,53,6,16,17,22,36,37,42,56,26,46,0,50,17,37,4,14,34,54,7,8,18,21,38,41,57,58,9,25,45,59,1,3,4,11,13,14,31,33,34,51,53,54,6,7,8,16,18,19,21,22,23,36,38,39,41,42,43,56,57,9,25,26,27,28,45,46,47,29,0,1,3,50,51,53,6,17,19,22,37,39,42,56,26,46,2,4,12,14,32,34,52,54,7,8,18,20,21,23,38,40,41,43,57,9,25,27,28,45,47,48,29,49,1,2,3,4,51,52,53,54,6,7,8,19,20,22,23,39,40,42,43,56,57,58,26,27,28,46,47,48,2,4,52,54,7,8,20,23,40,43,57,58,27,28,47,48,5,15,35,55,8,21,41,58,9,25,45,59,3,5,13,15,33,35,53,55,6,8,16,21,22,24,36,41,42,44,56,58,9,25,26,28,45,46,48,29,49,0,3,50,53,6,17,22,37,42,56,26,46,4,5,14,15,34,35,54,55,7,8,18,21,23,24,38,41,43,44,57,58,9,25,27,28,45,47,48,29,49,1,3,4,5,51,53,54,55,6,7,8,19,22,23,24,39,42,43,44,56,57,58,26,27,28,46,47,48,2,4,5,52,54,55,7,8,20,23,24,40,43,44,57,58,27,28,47,48,5,15,35,55,8,21,24,41,44,58,9,25,28,45,48,59,29,49,3,5,53,55,6,8,22,24,42,44,56,58,26,28,46,48,4,5,54,55,7,8,23,24,43,44,57,58,27,28,47,48,5,55,8,24,44,58,28,48,6,16,36,56,9,25,45,59,10,30,0,50,6,16,17,36,37,56,26,46,0,50,17,37,7,18,38,57,9,25,45,59,11,31,1,51,6,7,16,18,19,36,38,39,56,57,9,25,26,27,45,46,47,29,0,1,50,51,6,17,19,37,39,56,26,46,12,32,2,52,7,18,20,38,40,57,9,25,27,45,47,29,49,1,2,51,52,6,7,19,20,39,40,56,57,9,26,27,46,47,59,29,49,2,52,7,20,40,57,9,27,47,59,29,49,8,21,41,58,9,25,45,59,13,33,3,53,6,8,16,21,22,36,41,42,56,58,9,25,26,28,45,46,48,59,29,49,0,3,50,53,6,17,22,37,42,56,26,46,14,34,4,54,7,8,18,21,23,38,41,43,57,58,9,25,27,28,45,47,48,59,29,49,1,3,4,51,53,54,6,7,8,19,22,23,39,42,43,56,57,58,9,26,27,28,46,47,48,59,29,49,2,4,52,54,7,8,20,23,40,43,57,58,9,27,28,47,48,59,29,49,15,35,5,55,8,21,24,41,44,58,9,25,28,45,48,59,29,49,0,50,17,37,6,56,26,46,1,51,19,39,6,7,56,57,9,26,27,46,47,59,29,49 };
static const int coeffs1_ind[] = { 9,59,29,49,8,58,28,48,9,59,29,49,7,57,27,47,9,59,29,49,6,56,26,46,9,59,29,49,25,45,9,59,29,49,5,55,24,44,8,58,9,28,48,59,29,49,4,54,23,43,7,8,57,58,9,27,28,47,48,59,29,49,3,53,22,42,6,8,56,58,9,26,28,46,48,59,29,49,21,41,8,58,9,25,28,45,48,59,29,49,2,52,20,40,7,57,9,27,47,59,29,49,18,38,7,57,9,25,27,45,47,59,29,49,16,36,6,56,9,25,26,45,46,59,29,49,9,25,45,59,5,55,8,24,44,58,9,28,48,59,29,49,4,5,54,55,7,8,23,24,43,44,57,58,9,27,28,47,48,59,29,49,3,5,53,55,6,8,22,24,42,44,56,58,9,26,28,46,48,59,29,49 };
static const int C0_ind[] = { 125,130,260,261,265,266,270,396,397,401,402,406,532,537,542,667,672,677,802,803,805,807,808,810,812,813,938,939,940,941,943,944,945,946,948,949,950,1074,1076,1079,1081,1084,1086,1209,1211,1214,1216,1219,1221,1223,1345,1346,1347,1349,1350,1351,1352,1354,1355,1356,1357,1359,1481,1482,1484,1486,1487,1489,1491,1492,1494,1495,1617,1619,1622,1624,1627,1629,1631,1753,1754,1758,1759,1763,1764,1767,1889,1894,1899,1903,1997,2009,2132,2133,2144,2145,2156,2267,2279,2291,2404,2405,2416,2417,2428,2538,2539,2550,2551,2562,2563,2676,2688,2700,2810,2811,2822,2823,2834,2835,2946,2958,2970,3081,3093,3105,3112,3216,3217,3221,3228,3229,3233,3240,3241,3247,3248,3253,3258,3351,3363,3375,3394,3488,3489,3492,3493,3500,3501,3504,3505,3512,3513,3516,3519,3520,3524,3525,3529,3530,3534,3622,3623,3627,3634,3635,3639,3646,3647,3651,3665,3666,3670,3760,3764,3772,3776,3784,3788,3791,3796,3801,3806,3894,3895,3898,3899,3906,3907,3910,3911,3918,3919,3922,3923,3937,3938,3942,4030,4034,4042,4046,4054,4058,4073,4078,4165,4169,4177,4181,4189,4193,4198,4200,4203,4208,4213,4300,4312,4324,4344,4349,4437,4440,4441,4445,4449,4452,4453,4457,4461,4464,4465,4470,4471,4472,4474,4475,4477,4479,4480,4482,4484,4485,4571,4572,4575,4583,4584,4587,4595,4596,4599,4615,4616,4618,4620,4621,4709,4712,4716,4721,4724,4728,4733,4736,4740,4742,4743,4746,4748,4751,4753,4756,4758,4843,4844,4846,4847,4851,4855,4856,4858,4859,4863,4867,4868,4870,4871,4875,4887,4888,4889,4890,4892,4893,4894,4979,4982,4986,4991,4994,4998,5003,5006,5010,5023,5025,5028,5030,5117,5121,5129,5133,5141,5145,5150,5152,5153,5155,5158,5160,5163,5165,5167,5250,5252,5262,5264,5274,5276,5285,5294,5296,5299,5301,5389,5392,5401,5404,5413,5416,5422,5423,5425,5426,5430,5431,5435,5436,5439,5522,5523,5524,5527,5534,5535,5536,5539,5546,5547,5548,5551,5557,5566,5567,5568,5570,5571,5572,5573,5658,5659,5662,5670,5671,5674,5682,5683,5686,5693,5702,5703,5705,5707,5708,5710,5797,5809,5821,5830,5833,5838,5843,5847,5930,5932,5942,5944,5954,5956,5965,5974,5976,5979,5981,6066,6067,6078,6079,6090,6091,6101,6110,6111,6115,6116,6202,6214,6226,6237,6246,6251,6308,6316,6324,6337,6443,6444,6451,6452,6459,6460,6472,6473,6485,6497,6578,6586,6594,6633,6715,6716,6723,6724,6731,6732,6744,6745,6756,6757,6768,6769,6780,6849,6850,6857,6858,6865,6866,6891,6903,6904,6905,6915,6916,6984,7015,7039,7051,7123,7131,7139,7152,7164,7176,7188,7257,7258,7265,7266,7273,7274,7298,7299,7310,7311,7312,7313,7322,7323,7324,7391,7392,7422,7423,7446,7447,7458,7459,7529,7537,7545,7570,7582,7584,7594,7596,7663,7664,7694,7695,7718,7719,7730,7731,7799,7830,7854,7866,7934,7940,7944,7948,7952,7956,7965,7969,7977,7989,8001,8008,8069,8079,8087,8100,8125,8137,8206,8211,8212,8216,8219,8220,8224,8227,8228,8237,8240,8241,8248,8249,8253,8260,8261,8265,8272,8273,8279,8280,8285,8290,8340,8341,8346,8350,8351,8354,8358,8359,8362,8371,8372,8383,8395,8396,8397,8401,8407,8408,8409,8426,8475,8506,8531,8543,8614,8619,8624,8627,8632,8635,8645,8648,8656,8660,8668,8672,8680,8684,8687,8692,8697,8702,8748,8749,8753,8754,8758,8759,8761,8762,8766,8767,8769,8770,8779,8780,8790,8791,8795,8802,8803,8804,8805,8807,8808,8809,8814,8815,8816,8817,8819,8820,8833,8834,8838,8882,8883,8888,8913,8914,8919,8938,8939,8943,8950,8951,8955,9020,9025,9030,9033,9038,9041,9051,9062,9066,9074,9076,9078,9080,9086,9088,9090,9092,9105,9110,9154,9155,9159,9160,9185,9186,9190,9191,9210,9211,9214,9215,9222,9223,9226,9227,9290,9295,9321,9326,9346,9350,9358,9362,9430,9436,9440,9444,9448,9452,9461,9465,9469,9473,9481,9485,9493,9497,9502,9504,9507,9512,9517,9561,9565,9573,9575,9581,9583,9592,9596,9604,9616,9617,9621,9628,9629,9633,9648,9653,9696,9727,9752,9764,9838,9843,9848,9851,9856,9859,9869,9872,9877,9880,9889,9892,9901,9904,9910,9911,9914,9919,9924,9969,9972,9973,9978,9981,9982,9983,9986,9989,9990,9991,9994,10000,10003,10004,10011,10012,10015,10023,10024,10025,10027,10028,10029,10033,10035,10036,10037,10039,10040,10041,10055,10056,10058,10060,10061,10103,10104,10107,10134,10135,10138,10159,10160,10163,10171,10172,10175,10241,10244,10249,10253,10254,10257,10261,10262,10265,10272,10275,10283,10286,10295,10297,10298,10300,10304,10307,10309,10310,10312,10316,10327,10329,10332,10334,10375,10376,10378,10379,10384,10406,10407,10409,10410,10415,10431,10432,10434,10435,10439,10443,10444,10446,10447,10451,10511,10514,10519,10542,10545,10550,10567,10570,10574,10579,10582,10586,10654,10664,10672,10685,10693,10705,10717,10726,10729,10734,10739,10743,10785,10789,10797,10799,10805,10807,10816,10820,10826,10828,10838,10840,10841,10845,10850,10852,10853,10857,10861,10870,10872,10875,10877,10918,10920,10949,10951,10974,10976,10986,10988,11057,11060,11069,11070,11077,11078,11088,11091,11098,11099,11110,11111,11113,11116,11122,11123,11125,11128,11133,11142,11143,11147,11148,11190,11191,11192,11195,11221,11222,11223,11226,11246,11247,11248,11251,11258,11259,11260,11263,11326,11327,11330,11357,11358,11361,11382,11383,11386,11394,11395,11398,11465,11477,11485,11496,11506,11518,11521,11530,11533,11541,11550,11555,11598,11600,11629,11631,11654,11656,11666,11668,11734,11735,11765,11766,11790,11791,11802,11803,11870,11901,11926,11938,11988,11992,11996,12005,12020,12028,12036,12049,12123,12127,12131,12140,12164,12172,12260,12264,12268,12277,12291,12292,12299,12300,12307,12308,12320,12321,12333,12345,12394,12395,12398,12399,12402,12403,12411,12412,12426,12434,12435,12436,12442,12443,12444,12481,12529,12546,12570,12578,12668,12672,12676,12685,12699,12707,12715,12728,12740,12752,12764,12802,12803,12806,12807,12810,12811,12819,12820,12833,12834,12841,12842,12843,12844,12849,12850,12851,12852,12875,12887,12888,12889,12899,12900,12936,12937,12953,12954,12968,12977,12978,12985,12986,12999,13023,13035,13074,13078,13082,13091,13105,13113,13115,13121,13123,13146,13158,13160,13170,13172,13208,13209,13225,13226,13239,13240,13249,13250,13257,13258,13270,13271,13294,13295,13306,13307,13344,13361,13375,13385,13393,13406,13430,13442,13484,13488,13492,13501,13510,13516,13520,13524,13528,13532,13541,13545,13553,13565,13577,13584,13615,13619,13621,13623,13625,13627,13632,13636,13645,13655,13656,13660,13663,13664,13668,13676,13701,13713,13750,13767,13791,13799,13892,13896,13900,13909,13918,13923,13928,13931,13936,13939,13949,13952,13960,13972,13984,13991,14023,14026,14027,14029,14030,14031,14033,14034,14035,14040,14043,14044,14052,14053,14058,14062,14063,14064,14066,14067,14068,14070,14071,14072,14074,14075,14076,14083,14084,14095,14107,14108,14109,14113,14119,14120,14121,14138,14157,14158,14161,14174,14175,14178,14187,14198,14199,14202,14206,14207,14210,14218,14243,14255,14295,14298,14301,14302,14305,14306,14312,14315,14324,14329,14334,14336,14337,14339,14342,14344,14345,14347,14355,14366,14378,14380,14384,14390,14392,14396,14409,14414,14429,14430,14432,14433,14446,14447,14449,14450,14458,14459,14464,14470,14471,14473,14474,14478,14479,14481,14482,14489,14490,14495,14514,14515,14519,14526,14527,14531,14565,14568,14582,14585,14594,14599,14606,14609,14614,14617,14625,14630,14650,14654,14662,14666,14708,14712,14716,14725,14734,14744,14752,14765,14773,14785,14797,14806,14839,14843,14845,14847,14849,14851,14856,14860,14865,14869,14877,14879,14880,14884,14885,14887,14888,14892,14896,14900,14908,14920,14921,14925,14932,14933,14937,14952,14957,14972,14974,14989,14991,15000,15013,15015,15021,15023,15031,15056,15068,15111,15114,15117,15118,15121,15122,15128,15131,15137,15140,15149,15150,15152,15155,15157,15158,15160,15163,15168,15171,15179,15191,15193,15196,15203,15205,15208,15223,15228,15244,15245,15246,15249,15261,15262,15263,15266,15271,15272,15275,15285,15286,15287,15290,15293,15294,15295,15298,15302,15303,15306,15327,15328,15331,15339,15340,15343,15380,15381,15384,15397,15398,15401,15407,15410,15421,15422,15425,15429,15430,15433,15438,15441,15463,15466,15475,15478,15519,15525,15529,15536,15545,15557,15560,15565,15568,15576,15586,15598,15601,15610,15613,15621,15630,15635,15652,15654,15669,15671,15678,15680,15693,15695,15701,15703,15709,15711,15734,15736,15746,15748,15788,15789,15805,15806,15814,15815,15829,15830,15837,15838,15845,15846,15870,15871,15882,15883,15924,15941,15950,15965,15973,15981,16006,16018,16068,16072,16076,16085,16100,16108,16116,16129,16186,16187,16191,16195,16203,16207,16208,16211,16212,16220,16244,16252,16326,16330,16343,16347,16476,16480,16484,16493,16507,16515,16523,16536,16594,16595,16599,16603,16610,16611,16614,16615,16616,16618,16619,16620,16627,16628,16642,16650,16651,16652,16658,16659,16660,16697,16733,16734,16737,16738,16745,16750,16751,16754,16755,16762,16786,16794,16866,16867,16871,16875,16882,16886,16888,16890,16892,16899,16913,16921,16923,16929,16931,16968,16980,17005,17006,17009,17010,17016,17017,17022,17023,17026,17027,17033,17034,17048,17057,17058,17065,17066,17079,17103,17115,17141,17145,17152,17158,17162,17169,17183,17193,17201,17214,17238,17250,17292,17296,17300,17309,17318,17328,17336,17349,17410,17411,17415,17419,17423,17427,17429,17431,17432,17433,17435,17436,17440,17444,17453,17463,17464,17468,17471,17472,17476,17484,17509,17521,17548,17550,17552,17554,17558,17565,17567,17569,17571,17575,17599,17607,17682,17683,17687,17691,17695,17698,17701,17702,17704,17705,17706,17708,17712,17715,17724,17734,17736,17739,17742,17744,17747,17755,17780,17792,17820,17821,17822,17824,17825,17826,17829,17830,17833,17837,17838,17839,17841,17842,17843,17846,17847,17850,17859,17870,17871,17874,17878,17879,17882,17890,17915,17927,17956,17957,17960,17961,17965,17968,17973,17974,17977,17978,17982,17985,17994,18006,18009,18014,18017,18025,18050,18062,18090,18091,18095,18099,18103,18109,18112,18113,18116,18120,18129,18141,18144,18149,18152,18160,18185,18197,18224,18225,18226,18227,18230,18234,18247,18251,18360,18361,18362,18363,18365,18366,18369,18370,18377,18382,18383,18386,18387,18394,18418,18426 };
static const int C1_ind[] = { 0,1,2,3,136,137,138,139,140,144,157,161,272,273,274,275,277,281,294,298,408,409,410,411,414,418,431,435,546,547,551,555,568,572,680,681,682,683,684,688,692,701,705,709,733,741,816,817,818,819,820,821,824,825,829,837,838,841,842,846,870,878,952,953,954,955,956,958,960,962,966,973,975,977,979,983,1007,1015,1090,1091,1095,1099,1103,1109,1112,1113,1116,1120,1144,1152,1224,1225,1226,1227,1229,1233,1240,1246,1250,1257,1281,1289,1362,1363,1367,1371,1378,1382,1384,1386,1388,1395,1419,1427,1498,1499,1503,1507,1515,1519,1520,1523,1524,1532,1556,1564,1652,1656,1660,1669,1772,1776,1780,1789,1793,1797,1806,1821,1829,1837,1862,1874,1908,1909,1912,1913,1916,1917,1925,1926,1929,1930,1933,1934,1943,1957,1958,1965,1966,1974,1999,2011,2044,2046,2048,2050,2052,2054,2061,2063,2065,2067,2069,2071,2080,2093,2095,2101,2103,2111,2136,2148 };

using namespace Eigen;


int radialpose::bujnak_accv10::NonPlanarSolver::solve(Points2D& x, Points3D& X, std::vector<Camera>* poses) const {

	double d[64];

	// Setup nullspace 
	Eigen::Matrix<double, 8, 4> M;	
	Eigen::Matrix<double, 4, 4> A;
	Eigen::Map<Eigen::Matrix<double, 8, 4>> N(d);
	Eigen::Map<Eigen::Matrix<double, 4, 8>> B(d+32);

	for (int i = 0; i < 4; i++) {
		M(0, i) = -x(1, i) * X(0, i);
		M(1, i) = -x(1, i) * X(1, i);
		M(2, i) = -x(1, i) * X(2, i);
		M(3, i) = -x(1, i);
		M(4, i) = x(0, i) * X(0, i);
		M(5, i) = x(0, i) * X(1, i);
		M(6, i) = x(0, i) * X(2, i);
		M(7, i) = x(0, i);
	}

	// Compute nullspace using QR
	Eigen::Matrix<double, 8, 8> Q = M.householderQr().householderQ();
	N = Q.rightCols(4);

	// Setup matrices A and B (see paper for definition)
	for (int i = 0; i < 4; ++i) {
		double d2 = x.col(i).squaredNorm();

		if (std::abs(x(0, i)) < SMALL_NUMBER) {
			A(i, 0) = x(1, i) * X(0, i);
			A(i, 1) = x(1, i) * X(1, i);
			A(i, 2) = x(1, i) * X(2, i);
			A(i, 3) = x(1, i);

			B(i, 0) = X(0, i) * N(4, 0) + X(1, i) * N(5, 0) + X(2, i) * N(6, 0) + N(7, 0); // alpha1
			B(i, 1) = X(0, i) * N(4, 1) + X(1, i) * N(5, 1) + X(2, i) * N(6, 1) + N(7, 1); // alpha2
			B(i, 2) = X(0, i) * N(4, 2) + X(1, i) * N(5, 2) + X(2, i) * N(6, 2) + N(7, 2); // alpha3
			B(i, 3) = X(0, i) * N(4, 3) + X(1, i) * N(5, 3) + X(2, i) * N(6, 3) + N(7, 3); // 1			
		} else {
			A(i, 0) = x(0, i) * X(0, i);
			A(i, 1) = x(0, i) * X(1, i);
			A(i, 2) = x(0, i) * X(2, i);
			A(i, 3) = x(0, i);
			
			B(i, 0) = X(0, i) * N(0, 0) + X(1, i) * N(1, 0) + X(2, i) * N(2, 0) + N(3, 0); // alpha1
			B(i, 1) = X(0, i) * N(0, 1) + X(1, i) * N(1, 1) + X(2, i) * N(2, 1) + N(3, 1); // alpha2
			B(i, 2) = X(0, i) * N(0, 2) + X(1, i) * N(1, 2) + X(2, i) * N(2, 2) + N(3, 2); // alpha3
			B(i, 3) = X(0, i) * N(0, 3) + X(1, i) * N(1, 3) + X(2, i) * N(2, 3) + N(3, 3); // 1			
		}
		B(i, 4) = d2 * B(i, 0); // k*alpha1
		B(i, 5) = d2 * B(i, 1); // k*alpha2
		B(i, 6) = d2 * B(i, 2); // k*alpha3
		B(i, 7) = d2 * B(i, 3); // 
	}
	
	// [p31,p32,p33,p34] = B * [alpha; 1; lambda*alpha; lambda]
	B = A.partialPivLu().solve(B);
	
	// Compute coefficients in the template
	double coeffs[60];
	coeffs[0] = d[0] * d[4] + d[1] * d[5] + d[2] * d[6];
	coeffs[1] = d[0] * d[12] + d[4] * d[8] + d[1] * d[13] + d[5] * d[9] + d[2] * d[14] + d[6] * d[10];
	coeffs[2] = d[8] * d[12] + d[9] * d[13] + d[10] * d[14];
	coeffs[3] = d[0] * d[20] + d[4] * d[16] + d[1] * d[21] + d[5] * d[17] + d[2] * d[22] + d[6] * d[18];
	coeffs[4] = d[8] * d[20] + d[12] * d[16] + d[9] * d[21] + d[13] * d[17] + d[10] * d[22] + d[14] * d[18];
	coeffs[5] = d[16] * d[20] + d[17] * d[21] + d[18] * d[22];
	coeffs[6] = d[0] * d[28] + d[4] * d[24] + d[1] * d[29] + d[5] * d[25] + d[2] * d[30] + d[6] * d[26];
	coeffs[7] = d[8] * d[28] + d[12] * d[24] + d[9] * d[29] + d[13] * d[25] + d[10] * d[30] + d[14] * d[26];
	coeffs[8] = d[16] * d[28] + d[20] * d[24] + d[17] * d[29] + d[21] * d[25] + d[18] * d[30] + d[22] * d[26];
	coeffs[9] = d[24] * d[28] + d[25] * d[29] + d[26] * d[30];
	coeffs[10] = d[0] * d[48] + d[1] * d[49] + d[2] * d[50];
	coeffs[11] = d[0] * d[52] + d[1] * d[53] + d[2] * d[54] + d[8] * d[48] + d[9] * d[49] + d[10] * d[50];
	coeffs[12] = d[8] * d[52] + d[9] * d[53] + d[10] * d[54];
	coeffs[13] = d[0] * d[56] + d[1] * d[57] + d[2] * d[58] + d[16] * d[48] + d[17] * d[49] + d[18] * d[50];
	coeffs[14] = d[8] * d[56] + d[9] * d[57] + d[10] * d[58] + d[16] * d[52] + d[17] * d[53] + d[18] * d[54];
	coeffs[15] = d[16] * d[56] + d[17] * d[57] + d[18] * d[58];
	coeffs[16] = d[0] * d[60] + d[1] * d[61] + d[2] * d[62] + d[24] * d[48] + d[25] * d[49] + d[26] * d[50];
	coeffs[17] = d[0] * d[32] + d[1] * d[33] + d[2] * d[34];
	coeffs[18] = d[8] * d[60] + d[9] * d[61] + d[10] * d[62] + d[24] * d[52] + d[25] * d[53] + d[26] * d[54];
	coeffs[19] = d[0] * d[36] + d[1] * d[37] + d[2] * d[38] + d[8] * d[32] + d[9] * d[33] + d[10] * d[34];
	coeffs[20] = d[8] * d[36] + d[9] * d[37] + d[10] * d[38];
	coeffs[21] = d[16] * d[60] + d[17] * d[61] + d[18] * d[62] + d[24] * d[56] + d[25] * d[57] + d[26] * d[58];
	coeffs[22] = d[0] * d[40] + d[1] * d[41] + d[2] * d[42] + d[16] * d[32] + d[17] * d[33] + d[18] * d[34];
	coeffs[23] = d[8] * d[40] + d[9] * d[41] + d[10] * d[42] + d[16] * d[36] + d[17] * d[37] + d[18] * d[38];
	coeffs[24] = d[16] * d[40] + d[17] * d[41] + d[18] * d[42];
	coeffs[25] = d[24] * d[60] + d[25] * d[61] + d[26] * d[62];
	coeffs[26] = d[0] * d[44] + d[1] * d[45] + d[2] * d[46] + d[24] * d[32] + d[25] * d[33] + d[26] * d[34];
	coeffs[27] = d[8] * d[44] + d[9] * d[45] + d[10] * d[46] + d[24] * d[36] + d[25] * d[37] + d[26] * d[38];
	coeffs[28] = d[16] * d[44] + d[17] * d[45] + d[18] * d[46] + d[24] * d[40] + d[25] * d[41] + d[26] * d[42];
	coeffs[29] = d[24] * d[44] + d[25] * d[45] + d[26] * d[46];
	coeffs[30] = d[4] * d[48] + d[5] * d[49] + d[6] * d[50];
	coeffs[31] = d[4] * d[52] + d[5] * d[53] + d[6] * d[54] + d[12] * d[48] + d[13] * d[49] + d[14] * d[50];
	coeffs[32] = d[12] * d[52] + d[13] * d[53] + d[14] * d[54];
	coeffs[33] = d[4] * d[56] + d[5] * d[57] + d[6] * d[58] + d[20] * d[48] + d[21] * d[49] + d[22] * d[50];
	coeffs[34] = d[12] * d[56] + d[13] * d[57] + d[14] * d[58] + d[20] * d[52] + d[21] * d[53] + d[22] * d[54];
	coeffs[35] = d[20] * d[56] + d[21] * d[57] + d[22] * d[58];
	coeffs[36] = d[4] * d[60] + d[5] * d[61] + d[6] * d[62] + d[28] * d[48] + d[29] * d[49] + d[30] * d[50];
	coeffs[37] = d[4] * d[32] + d[5] * d[33] + d[6] * d[34];
	coeffs[38] = d[12] * d[60] + d[13] * d[61] + d[14] * d[62] + d[28] * d[52] + d[29] * d[53] + d[30] * d[54];
	coeffs[39] = d[4] * d[36] + d[5] * d[37] + d[6] * d[38] + d[12] * d[32] + d[13] * d[33] + d[14] * d[34];
	coeffs[40] = d[12] * d[36] + d[13] * d[37] + d[14] * d[38];
	coeffs[41] = d[20] * d[60] + d[21] * d[61] + d[22] * d[62] + d[28] * d[56] + d[29] * d[57] + d[30] * d[58];
	coeffs[42] = d[4] * d[40] + d[5] * d[41] + d[6] * d[42] + d[20] * d[32] + d[21] * d[33] + d[22] * d[34];
	coeffs[43] = d[12] * d[40] + d[13] * d[41] + d[14] * d[42] + d[20] * d[36] + d[21] * d[37] + d[22] * d[38];
	coeffs[44] = d[20] * d[40] + d[21] * d[41] + d[22] * d[42];
	coeffs[45] = d[28] * d[60] + d[29] * d[61] + d[30] * d[62];
	coeffs[46] = d[4] * d[44] + d[5] * d[45] + d[6] * d[46] + d[28] * d[32] + d[29] * d[33] + d[30] * d[34];
	coeffs[47] = d[12] * d[44] + d[13] * d[45] + d[14] * d[46] + d[28] * d[36] + d[29] * d[37] + d[30] * d[38];
	coeffs[48] = d[20] * d[44] + d[21] * d[45] + d[22] * d[46] + d[28] * d[40] + d[29] * d[41] + d[30] * d[42];
	coeffs[49] = d[28] * d[44] + d[29] * d[45] + d[30] * d[46];
	coeffs[50] = std::pow(d[0], 2) + std::pow(d[1], 2) + std::pow(d[2], 2) - std::pow(d[4], 2) - std::pow(d[5], 2) - std::pow(d[6], 2);
	coeffs[51] = 2 * d[0] * d[8] + 2 * d[1] * d[9] + 2 * d[2] * d[10] - 2 * d[4] * d[12] - 2 * d[5] * d[13] - 2 * d[6] * d[14];
	coeffs[52] = std::pow(d[8], 2) + std::pow(d[9], 2) + std::pow(d[10], 2) - std::pow(d[12], 2) - std::pow(d[13], 2) - std::pow(d[14], 2);
	coeffs[53] = 2 * d[0] * d[16] + 2 * d[1] * d[17] + 2 * d[2] * d[18] - 2 * d[4] * d[20] - 2 * d[5] * d[21] - 2 * d[6] * d[22];
	coeffs[54] = 2 * d[8] * d[16] + 2 * d[9] * d[17] + 2 * d[10] * d[18] - 2 * d[12] * d[20] - 2 * d[13] * d[21] - 2 * d[14] * d[22];
	coeffs[55] = std::pow(d[16], 2) + std::pow(d[17], 2) + std::pow(d[18], 2) - std::pow(d[20], 2) - std::pow(d[21], 2) - std::pow(d[22], 2);
	coeffs[56] = 2 * d[0] * d[24] + 2 * d[1] * d[25] + 2 * d[2] * d[26] - 2 * d[4] * d[28] - 2 * d[5] * d[29] - 2 * d[6] * d[30];
	coeffs[57] = 2 * d[8] * d[24] + 2 * d[9] * d[25] + 2 * d[10] * d[26] - 2 * d[12] * d[28] - 2 * d[13] * d[29] - 2 * d[14] * d[30];
	coeffs[58] = 2 * d[16] * d[24] + 2 * d[17] * d[25] + 2 * d[18] * d[26] - 2 * d[20] * d[28] - 2 * d[21] * d[29] - 2 * d[22] * d[30];
	coeffs[59] = std::pow(d[24], 2) + std::pow(d[25], 2) + std::pow(d[26], 2) - std::pow(d[28], 2) - std::pow(d[29], 2) - std::pow(d[30], 2);


	// Setup elimination template	
	Eigen::Matrix<double, Dynamic, Dynamic> C0(136,136);
	C0.setZero();
	Eigen::Matrix<double, Dynamic, Dynamic> C1(136,16);
	C1.setZero();


	for (int i = 0; i < 1758; i++) { C0(C0_ind[i]) = coeffs[coeffs0_ind[i]]; }
	for (int i = 0; i < 182; i++) { C1(C1_ind[i]) = coeffs[coeffs1_ind[i]]; }
	Eigen::Matrix<double, 136, 16> C12 = C0.partialPivLu().solve(C1);

	// Setup action matrix
	Eigen::Matrix<double, 16, 16> AM;
	AM.setZero();
	AM(0, 3) = 1;
	AM(1, 7) = 1;
	AM.row(2) = -C12.row(135);
	AM.row(3) = -C12.row(134);
	AM(4, 11) = 1;
	AM(5, 15) = 1;
	AM.row(6) = -C12.row(131);
	AM.row(7) = -C12.row(129);
	AM.row(8) = -C12.row(128);
	AM.row(9) = -C12.row(125);
	AM.row(10) = -C12.row(122);
	AM.row(11) = -C12.row(119);
	AM.row(12) = -C12.row(118);
	AM.row(13) = -C12.row(115);
	AM.row(14) = -C12.row(112);
	AM.row(15) = -C12.row(110);

	// Solve eigenvalue problem
	Eigen::EigenSolver<Eigen::Matrix<double, 16, 16> > es(AM, true);
	Eigen::Array<std::complex<double>, 16, 1> D = es.eigenvalues();
	Eigen::Array<std::complex<double>, 16, 16> V = es.eigenvectors().array();
	Eigen::Array<std::complex<double>, 1, 16> scale = V.row(0);		
		
	// Extract solutions from eigenvectors/values
	Eigen::Matrix<std::complex<double>, 4, 16> sols;
	sols.setZero();
	sols.row(0).array() = V.row(4).array() / scale;
	sols.row(1).array() = V.row(3).array() / scale;
	sols.row(2).array() = V.row(2).array() / scale;
	sols.row(3).array() = V.row(1).array() / scale;

	// Compute poses from solutions
	for (int i = 0; i < 16; ++i) {
		if (std::abs(D(i).imag()) > SMALL_NUMBER)
			continue;

		Eigen::Matrix<double, 3, 4> P;
		double lambda = sols(0, i).real();
		Eigen::Vector4d alpha;
		alpha << sols(1, i).real(), sols(2, i).real(), sols(3, i).real(), 1.0;		
		Eigen::Matrix<double, 8, 1> P12 = N * alpha;
		Eigen::Matrix<double, 8, 1> v;
		v << alpha.block<3, 1>(0, 0), 1.0, lambda * alpha.block<3, 1>(0, 0), lambda;		
		P.block<2, 4>(0, 0) = Eigen::Map<Eigen::Matrix<double, 4, 2>>(P12.data()).transpose();		
		P.row(2) = B * v;

		if (P.block<3, 3>(0, 0).determinant() < 0)
			P = -P;

		P = P / P.block<1, 3>(2, 0).norm();
		double focal = P.block<1, 3>(0, 0).norm();
		P.row(0) = P.row(0) / focal;
		P.row(1) = P.row(1) / focal;

		Camera p;
		p.R = P.block<3, 3>(0, 0);
		p.t = P.block<3, 1>(0, 3);
		p.focal = focal;
		p.dist_params.push_back(lambda * (focal*focal));

		poses->push_back(p);
	}
	
	return poses->size();
}

template class radialpose::PoseEstimator<radialpose::bujnak_accv10::NonPlanarSolver>;
